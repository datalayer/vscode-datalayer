name: Build - Extension

on:
  push:
    branches: [main]
    paths:
      - "src/**"
      - "webview/**"
      - "package.json"
      - "webpack.config.js"
      - ".github/workflows/build-extension.yml"
  pull_request:
    branches: [main]
    paths:
      - "src/**"
      - "webview/**"
      - "package.json"
      - "webpack.config.js"
      - ".github/workflows/build-extension.yml"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Build & Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions:
      pull-requests: write # Required to post PR comments
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ["20"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Build VS Code extension
        run: npm run compile

      - name: Package extension (.vsix)
        run: npm run vsix

      - name: List generated artifacts
        run: |
          echo "Generated extension package:"
          ls -la *.vsix || echo "No .vsix files found"
        shell: bash

      - name: Upload VS Code extension artifact
        if: matrix.os == 'ubuntu-latest'
        id: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode-datalayer-node${{ matrix.node-version }}
          path: "*.vsix"
          retention-days: 30

      - name: Post PR comment with artifact
        if: matrix.os == 'ubuntu-latest' && github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          number: ${{ github.event.pull_request.number }}
          header: extension-artifact
          message: |
            ## ðŸ“¦ Extension Build Ready!

            **Download the extension** (works on all platforms):

            [ðŸ“¥ Download datalayer-jupyter-vscode.vsix](${{ steps.upload-artifact.outputs.artifact-url }})

            ---

            <details>
            <summary>ðŸ“– Installation Instructions</summary>

            ### Method 1: VS Code UI
            1. Download the `.vsix` file above
            2. Open VS Code
            3. Go to Extensions (`Ctrl+Shift+X` / `Cmd+Shift+X`)
            4. Click `...` menu â†’ "Install from VSIX..."
            5. Select the downloaded file

            ### Method 2: Command Line
            ```bash
            code --install-extension datalayer-jupyter-vscode.vsix
            ```

            ### Method 3: Drag & Drop
            1. Download the `.vsix` file
            2. Drag it into the VS Code Extensions sidebar

            </details>

            > **Note**: The `.vsix` artifact works on **Windows, macOS, and Linux**.
            >
            > Built from commit [`${{ github.sha }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) â€¢ [View workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

  test-installation:
    name: Test Extension Installation
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Download extension artifact
        uses: actions/download-artifact@v4
        with:
          name: vscode-datalayer-node20
          path: ./artifacts

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find ./artifacts -name "*.vsix" -type f

      - name: Verify extension package
        run: |
          VSIX_FILE=$(find ./artifacts -name "*.vsix" -type f | head -1)
          if [ -z "$VSIX_FILE" ]; then
            echo "Error: No .vsix file found in artifacts"
            exit 1
          fi

          echo "Found extension package: $VSIX_FILE"
          echo "File size: $(stat -c%s "$VSIX_FILE") bytes"

          # Verify it's a valid zip file (VSIX is a ZIP)
          if ! unzip -t "$VSIX_FILE" > /dev/null 2>&1; then
            echo "Error: Extension package is not a valid ZIP file"
            exit 1
          fi

          echo "âœ… Extension package validation successful"
