name: Release

on:
  push:
    tags:
      - "v*.*.*" # Trigger on version tags like v0.0.4, v1.0.0, etc.

permissions:
  contents: write # Required for creating releases
  id-token: write # Required for attestations

jobs:
  build-and-release:
    name: Build and Release Extension
    runs-on: ubuntu-latest

    steps:
      - name: Setup directory structure
        run: mkdir -p datalayer

      - name: Checkout VS Code extension repository
        uses: actions/checkout@v5
        with:
          path: datalayer/vscode-datalayer
          fetch-depth: 0 # Fetch all history for changelog generation

      - name: Checkout core repository
        uses: actions/checkout@v5
        with:
          repository: datalayer/core
          ref: main
          path: datalayer/core

      - name: Setup build environment
        uses: ./datalayer/vscode-datalayer/.github/actions/setup-environment
        with:
          node-version: "20"
          os: "ubuntu-latest"
          skip-debug: "true"

      - name: Run type checking
        working-directory: datalayer/vscode-datalayer
        run: npm run type-check

      - name: Run linter
        working-directory: datalayer/vscode-datalayer
        run: npm run lint

      - name: Build extension
        working-directory: datalayer/vscode-datalayer
        run: npm run compile

      - name: Extract version from tag
        id: extract_version
        working-directory: datalayer/vscode-datalayer
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Verify package.json version matches tag
        working-directory: datalayer/vscode-datalayer
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION="${{ steps.extract_version.outputs.version }}"
          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "Error: package.json version ($PACKAGE_VERSION) does not match tag version ($TAG_VERSION)"
            exit 1
          fi
          echo "Version verified: $PACKAGE_VERSION"

      - name: Package extension
        working-directory: datalayer/vscode-datalayer
        run: npm run vsix

      - name: Get VSIX filename
        id: vsix_filename
        working-directory: datalayer/vscode-datalayer
        run: |
          VSIX_FILE=$(ls *.vsix | head -n 1)
          echo "filename=$VSIX_FILE" >> $GITHUB_OUTPUT
          echo "VSIX file: $VSIX_FILE"

      - name: Generate changelog
        id: changelog
        working-directory: datalayer/vscode-datalayer
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, using initial commit"
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi

          echo "Generating changelog from $PREVIOUS_TAG to ${{ github.ref_name }}"

          # Generate changelog
          CHANGELOG=$(git log $PREVIOUS_TAG..${{ github.ref_name }} --pretty=format:"* %s (%h)" --no-merges)

          # Save to file for release notes
          echo "$CHANGELOG" > CHANGELOG.txt

          # Also output for debugging
          echo "Changelog:"
          echo "$CHANGELOG"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.extract_version.outputs.version }}
          body_path: datalayer/vscode-datalayer/CHANGELOG.txt
          files: datalayer/vscode-datalayer/${{ steps.vsix_filename.outputs.filename }}
          draft: false
          prerelease: ${{ contains(steps.extract_version.outputs.version, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check VS Code Marketplace credentials
        id: check_vsce_pat
        run: |
          if [ -n "${{ secrets.VSCE_PAT }}" ]; then
            echo "has_secret=true" >> $GITHUB_OUTPUT
          else
            echo "has_secret=false" >> $GITHUB_OUTPUT
            echo "⚠️ VSCE_PAT secret not found - skipping VS Code Marketplace publishing"
          fi

      - name: Publish to VS Code Marketplace
        if: ${{ steps.check_vsce_pat.outputs.has_secret == 'true' && !contains(steps.extract_version.outputs.version, '-') }}
        working-directory: datalayer/vscode-datalayer
        run: |
          echo "Publishing version ${{ steps.extract_version.outputs.version }} to VS Code Marketplace"
          npx vsce publish --packagePath ${{ steps.vsix_filename.outputs.filename }}
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
