{
  "name": "datalayer-jupyter-vscode",
  "displayName": "Datalayer",
  "description": "⚡ Bring cloud power to your Jupyter notebooks. ✨ Create Notion-like collaborative reports with executable code.",
  "version": "0.0.4",
  "cache_version": "2",
  "icon": "images/datalayer-logo.png",
  "categories": [
    "AI",
    "Data Science",
    "Machine Learning",
    "Data Analysis",
    "Notebooks",
    "Visualization",
    "Jupyter",
    "Cloud Computing"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/datalayer/vscode-datalayer.git"
  },
  "engines": {
    "vscode": "^1.105.0",
    "node": ">=20.0.0 <21.0.0"
  },
  "main": "./dist/extension.js",
  "activationEvents": [
    "onStartupFinished"
  ],
  "contributes": {
    "commands": [
      {
        "command": "datalayer.login",
        "title": "Login to Datalayer",
        "category": "Datalayer"
      },
      {
        "command": "datalayer.logout",
        "title": "Logout from Datalayer",
        "category": "Datalayer"
      },
      {
        "command": "datalayer.showAuthStatus",
        "title": "Show Authentication Status",
        "category": "Datalayer"
      },
      {
        "command": "datalayer.help",
        "title": "Help and Feedback",
        "category": "Datalayer"
      },
      {
        "command": "datalayer.selectRuntime",
        "title": "Select/Switch Runtime",
        "category": "Datalayer"
      },
      {
        "command": "datalayer.terminateRuntime",
        "title": "Terminate Runtime",
        "category": "Datalayer"
      },
      {
        "command": "datalayer.newLocalDatalayerNotebook",
        "title": "New Notebook...",
        "category": "Datalayer",
        "icon": "$(notebook)"
      },
      {
        "command": "datalayer.newLocalLexicalDocument",
        "title": "New Lexical...",
        "category": "Datalayer",
        "icon": "$(file-text)"
      },
      {
        "command": "datalayer.newRemoteDatalayerNotebookPrompt",
        "title": "New Notebook in Space...",
        "category": "Datalayer",
        "icon": "$(notebook)"
      },
      {
        "command": "datalayer.newRemoteLexicalDocumentPrompt",
        "title": "New Lexical in Space...",
        "category": "Datalayer",
        "icon": "$(file-text)"
      },
      {
        "command": "datalayer.showNotebookControllerStatus",
        "title": "Show Runtime Controllers Status",
        "category": "Datalayer"
      },
      {
        "command": "datalayer.terminateRuntimes",
        "title": "Terminate Runtimes",
        "category": "Datalayer"
      },
      {
        "command": "datalayer.refreshSpaces",
        "title": "Refresh Spaces",
        "icon": "$(refresh)"
      },
      {
        "command": "datalayer.openDocument",
        "title": "Open"
      },
      {
        "command": "datalayer.renameItem",
        "title": "Rename..."
      },
      {
        "command": "datalayer.deleteItem",
        "title": "Delete"
      },
      {
        "command": "datalayer.runtimes.refresh",
        "title": "Refresh Runtimes",
        "icon": "$(refresh)"
      },
      {
        "command": "datalayer.runtimes.create",
        "title": "Create Runtime",
        "icon": "$(add)"
      },
      {
        "command": "datalayer.runtimes.terminate",
        "title": "Terminate Runtime",
        "icon": "$(trash)"
      },
      {
        "command": "datalayer.runtimes.terminateAll",
        "title": "Terminate All Runtimes",
        "icon": "$(trash)"
      },
      {
        "command": "datalayer.runtimes.createSnapshot",
        "title": "Create Snapshot"
      },
      {
        "command": "datalayer.runtimes.delete",
        "title": "Delete"
      }
    ],
    "views": {
      "explorer": [
        {
          "id": "datalayerSpaces",
          "name": "Datalayer Spaces",
          "icon": "$(menu)",
          "contextualTitle": "Datalayer Spaces",
          "when": "true"
        },
        {
          "id": "datalayerRuntimes",
          "name": "Datalayer Runtimes",
          "icon": "$(vm)",
          "contextualTitle": "Datalayer Runtimes",
          "when": "true"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "datalayerSpaces",
        "contents": "Welcome to Datalayer Spaces.\n[Login to Datalayer](command:datalayer.login) to view your spaces and documents.",
        "when": "!datalayer.authenticated"
      }
    ],
    "keybindings": [
      {
        "command": "datalayer.newLocalDatalayerNotebook",
        "key": "ctrl+alt+shift+n",
        "mac": "cmd+alt+shift+n",
        "when": "!editorFocus"
      },
      {
        "command": "datalayer.newLocalLexicalDocument",
        "key": "ctrl+alt+shift+l",
        "mac": "cmd+alt+shift+l",
        "when": "!editorFocus"
      },
      {
        "command": "datalayer.newRemoteDatalayerNotebookPrompt",
        "key": "ctrl+alt+n",
        "mac": "cmd+alt+n",
        "when": "!editorFocus"
      },
      {
        "command": "datalayer.newRemoteLexicalDocumentPrompt",
        "key": "ctrl+alt+l",
        "mac": "cmd+alt+l",
        "when": "!editorFocus"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "datalayer.refreshSpaces",
          "when": "false"
        },
        {
          "command": "datalayer.openDocument",
          "when": "false"
        },
        {
          "command": "datalayer.renameItem",
          "when": "false"
        },
        {
          "command": "datalayer.deleteItem",
          "when": "false"
        },
        {
          "command": "datalayer.runtimes.refresh",
          "when": "false"
        },
        {
          "command": "datalayer.runtimes.create",
          "when": "false"
        },
        {
          "command": "datalayer.runtimes.terminate",
          "when": "false"
        },
        {
          "command": "datalayer.runtimes.terminateAll",
          "when": "false"
        },
        {
          "command": "datalayer.runtimes.createSnapshot",
          "when": "false"
        },
        {
          "command": "datalayer.runtimes.delete",
          "when": "false"
        }
      ],
      "view/title": [
        {
          "command": "datalayer.newRemoteDatalayerNotebookPrompt",
          "when": "view == datalayerSpaces",
          "group": "navigation@0"
        },
        {
          "command": "datalayer.newRemoteLexicalDocumentPrompt",
          "when": "view == datalayerSpaces",
          "group": "navigation@0.5"
        },
        {
          "command": "datalayer.refreshSpaces",
          "when": "view == datalayerSpaces",
          "group": "navigation@1"
        },
        {
          "command": "datalayer.runtimes.refresh",
          "when": "view == datalayerRuntimes",
          "group": "navigation@1"
        },
        {
          "command": "datalayer.runtimes.create",
          "when": "view == datalayerRuntimes",
          "group": "navigation@2"
        },
        {
          "command": "datalayer.runtimes.terminateAll",
          "when": "view == datalayerRuntimes",
          "group": "navigation@3"
        }
      ],
      "view/item/context": [
        {
          "command": "datalayer.newRemoteDatalayerNotebookPrompt",
          "when": "view == datalayerSpaces && (viewItem == notebook || viewItem == document)",
          "group": "1_create@1"
        },
        {
          "command": "datalayer.newRemoteLexicalDocumentPrompt",
          "when": "view == datalayerSpaces && (viewItem == notebook || viewItem == document)",
          "group": "1_create@2"
        },
        {
          "command": "datalayer.openDocument",
          "when": "view == datalayerSpaces && (viewItem == notebook || viewItem == document)",
          "group": "2_open"
        },
        {
          "command": "datalayer.renameItem",
          "when": "view == datalayerSpaces && (viewItem == notebook || viewItem == document)",
          "group": "3_edit@1"
        },
        {
          "command": "datalayer.deleteItem",
          "when": "view == datalayerSpaces && (viewItem == notebook || viewItem == document)",
          "group": "3_edit@2"
        },
        {
          "command": "datalayer.newRemoteDatalayerNotebookPrompt",
          "when": "view == datalayerSpaces && viewItem == root",
          "group": "1_create@1"
        },
        {
          "command": "datalayer.newRemoteLexicalDocumentPrompt",
          "when": "view == datalayerSpaces && viewItem == root",
          "group": "1_create@2"
        },
        {
          "command": "datalayer.newRemoteDatalayerNotebookPrompt",
          "when": "view == datalayerSpaces && viewItem == space",
          "group": "1_create"
        },
        {
          "command": "datalayer.newRemoteLexicalDocumentPrompt",
          "when": "view == datalayerSpaces && viewItem == space",
          "group": "1_create"
        },
        {
          "command": "datalayer.newRemoteDatalayerNotebookPrompt",
          "when": "view == datalayerSpaces && viewItem == space",
          "group": "inline@1"
        },
        {
          "command": "datalayer.newRemoteLexicalDocumentPrompt",
          "when": "view == datalayerSpaces && viewItem == space",
          "group": "inline@2"
        },
        {
          "command": "datalayer.runtimes.terminate",
          "when": "view == datalayerRuntimes && viewItem == runtime",
          "group": "inline"
        },
        {
          "command": "datalayer.runtimes.delete",
          "when": "view == datalayerRuntimes && viewItem == runtime",
          "group": "2_delete"
        }
      ],
      "explorer/context": [
        {
          "command": "datalayer.newLocalDatalayerNotebook",
          "group": "navigation@10"
        },
        {
          "command": "datalayer.newLocalLexicalDocument",
          "group": "navigation@11"
        }
      ],
      "editor/title": [
        {
          "command": "datalayer.newLocalDatalayerNotebook",
          "when": "resourceExtname == .ipynb || resourceExtname == .lexical",
          "group": "navigation@1"
        },
        {
          "command": "datalayer.newLocalLexicalDocument",
          "when": "resourceExtname == .ipynb || resourceExtname == .lexical",
          "group": "navigation@2"
        }
      ]
    },
    "configuration": {
      "title": "Datalayer",
      "properties": {
        "datalayer.services.iamUrl": {
          "type": "string",
          "default": "https://prod1.datalayer.run",
          "description": "IAM (Identity and Access Management) service URL"
        },
        "datalayer.services.runtimesUrl": {
          "type": "string",
          "default": "https://prod1.datalayer.run",
          "description": "Runtimes service URL for computational environments"
        },
        "datalayer.services.spacerUrl": {
          "type": "string",
          "default": "https://prod1.datalayer.run",
          "description": "Spacer service URL for workspaces and collaboration"
        },
        "datalayer.services.spacerWsUrl": {
          "type": "string",
          "default": "wss://prod1.datalayer.run",
          "description": "WebSocket URL for Spacer real-time collaboration"
        },
        "datalayer.runtime.defaultMinutes": {
          "type": "number",
          "default": 10,
          "minimum": 1,
          "maximum": 1440,
          "description": "Default runtime duration in minutes (max 24 hours)"
        },
        "datalayer.logging.level": {
          "type": "string",
          "enum": [
            "trace",
            "debug",
            "info",
            "warn",
            "error"
          ],
          "enumDescriptions": [
            "Most verbose - includes all debug information and operation traces",
            "Verbose - includes detailed debugging information for troubleshooting",
            "Standard - includes important events and status updates",
            "Important - includes warnings and potential issues",
            "Critical - includes only errors and critical failures"
          ],
          "default": "info",
          "description": "Controls the minimum log level for extension logging output"
        },
        "datalayer.logging.includeTimestamps": {
          "type": "boolean",
          "default": true,
          "description": "Include timestamps in log messages for better debugging"
        },
        "datalayer.logging.includeContext": {
          "type": "boolean",
          "default": true,
          "description": "Include additional context information (operation IDs, request details) in logs"
        },
        "datalayer.logging.enableSDKLogging": {
          "type": "boolean",
          "default": true,
          "description": "Enable comprehensive logging for DatalayerClient SDK operations and API calls"
        },
        "datalayer.logging.enablePerformanceMonitoring": {
          "type": "boolean",
          "default": false,
          "description": "Enable performance monitoring with timing and memory usage tracking (may impact performance)"
        }
      }
    },
    "customEditors": [
      {
        "viewType": "datalayer.jupyter-notebook",
        "displayName": "Datalayer Notebook...",
        "selector": [
          {
            "filenamePattern": "*.ipynb"
          }
        ]
      },
      {
        "viewType": "datalayer.lexical-editor",
        "displayName": "Datalayer Lexical Editor",
        "selector": [
          {
            "filenamePattern": "*.lexical"
          }
        ]
      }
    ]
  },
  "scripts": {
    "postinstall": "node scripts/patch-jupyter-lexical.js && patch-package",
    "clean": "rm -rf dist out *.vsix",
    "clean:dist": "rm -rf dist",
    "clean:out": "rm -rf out",
    "clean:vsix": "rm -rf *.vsix",
    "vscode:prepublish": "npm run clean && npm run package",
    "compile": "npm run clean:dist && webpack",
    "watch": "npm run clean:dist && webpack --watch",
    "package": "npm run clean:dist && webpack --mode production --devtool hidden-source-map",
    "compile-tests": "npm run clean:out && tsc -p tsconfig.test.json",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "test:coverage": "vscode-test --coverage",
    "test:coverage:html": "npm run test:coverage && open coverage/index.html",
    "format": "prettier --write 'src/**/*.{ts,tsx,js,jsx,json,css,md}' 'webview/**/*.{ts,tsx,js,jsx,json,css,md}' '*.{js,json,md}' 'tsconfig*.json' '.vscode/*.json' '.github/workflows/*.yml'",
    "format:check": "prettier --check 'src/**/*.{ts,tsx,js,jsx,json,css,md}' 'webview/**/*.{ts,tsx,js,jsx,json,css,md}' '*.{js,json,md}' 'tsconfig*.json' '.vscode/*.json' '.github/workflows/*.yml'",
    "lint": "eslint src webview",
    "lint:fix": "eslint src webview --fix",
    "type-check": "tsc --noEmit && tsc --noEmit -p tsconfig.webview.json",
    "check": "npm run format:check && npm run lint && npm run type-check",
    "check:fix": "npm run format && npm run lint:fix && npm run type-check",
    "test": "vscode-test",
    "vsix": "npm run clean:vsix && npx @vscode/vsce package --no-yarn --no-dependencies",
    "docs": "typedoc",
    "docs:watch": "typedoc --watch",
    "docs:markdown": "typedoc --plugin typedoc-plugin-markdown --out docs-markdown",
    "docs:coverage": "typedoc --validation"
  },
  "dependencies": {
    "@codemirror/autocomplete": "^6.18.7",
    "@codemirror/commands": "^6.8.1",
    "@codemirror/language": "^6.11.3",
    "@codemirror/lint": "^6.8.5",
    "@codemirror/search": "^6.5.11",
    "@codemirror/state": "^6.5.2",
    "@codemirror/view": "^6.38.3",
    "@datalayer/core": "^0.0.13",
    "@datalayer/jupyter-lexical": "^1.0.6",
    "@datalayer/lexical-loro": "^0.1.0",
    "@jupyter/ydoc": "^2.0.0",
    "@jupyterlab/services": "^7.0.0",
    "@lexical/code": "^0.35.0",
    "@lexical/html": "^0.35.0",
    "@lexical/link": "^0.35.0",
    "@lexical/list": "^0.35.0",
    "@lexical/markdown": "^0.35.0",
    "@lexical/react": "^0.35.0",
    "@lexical/rich-text": "^0.35.0",
    "@lexical/selection": "^0.35.0",
    "@lexical/utils": "^0.35.0",
    "@lezer/highlight": "^1.2.1",
    "@lumino/coreutils": "^2.1.1",
    "@lumino/disposable": "^2.1.1",
    "@lumino/signaling": "^2.1.1",
    "@primer/react": "^37.19.0",
    "@primer/react-brand": "^0.58.1",
    "@vscode/codicons": "^0.0.41",
    "buffer": "^6.0.3",
    "codemirror": "^6.0.2",
    "lexical": "^0.35.0",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "typestyle": "^2.0.4",
    "uuid": "^8.3.2",
    "ws": "^8.18.1",
    "y-websocket": "3.0.0",
    "yjs": "^13.6.18"
  },
  "devDependencies": {
    "@types/jest": "^30.0.0",
    "@types/mocha": "^10.0.10",
    "@types/node": "^24.8.1",
    "@types/react": "18.3.20",
    "@types/react-dom": "18.3.6",
    "@types/uuid": "^8.3.4",
    "@types/vscode": "^1.105.0",
    "@types/ws": "^8.18.1",
    "@typescript-eslint/eslint-plugin": "^8.46.2",
    "@typescript-eslint/parser": "^8.29.1",
    "@vscode/test-cli": "^0.0.12",
    "@vscode/test-electron": "^2.4.1",
    "@vscode/vsce": "^3.3.2",
    "c8": "^10.1.3",
    "copy-webpack-plugin": "^13.0.1",
    "css-loader": "^5.1.3",
    "eslint": "^9.0.0",
    "mini-svg-data-uri": "^1.4.4",
    "null-loader": "^4.0.1",
    "ovsx": "^0.10.6",
    "patch-package": "^8.0.1",
    "prettier": "^3.6.2",
    "process": "^0.11.10",
    "style-loader": "^2.0.0",
    "svg-inline-loader": "^0.8.2",
    "ts-loader": "^9.5.2",
    "typedoc": "^0.28.14",
    "typedoc-plugin-coverage": "^4.0.1",
    "typedoc-plugin-markdown": "^4.8.1",
    "typescript": "^5.8.3",
    "webpack": "^5.98.0",
    "webpack-cli": "^6.0.1"
  }
}
