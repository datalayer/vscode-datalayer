diff --git a/node_modules/@datalayer/jupyter-react/lib/components/notebook/Notebook2Adapter.d.ts b/node_modules/@datalayer/jupyter-react/lib/components/notebook/Notebook2Adapter.d.ts
index 841a2cf..b8bf4a6 100644
--- a/node_modules/@datalayer/jupyter-react/lib/components/notebook/Notebook2Adapter.d.ts
+++ b/node_modules/@datalayer/jupyter-react/lib/components/notebook/Notebook2Adapter.d.ts
@@ -54,6 +54,24 @@ export declare class Notebook2Adapter {
      * Get the notebook model.
      */
     get model(): NotebookModel | null;
+    /**
+     * Undo the last change in the notebook.
+     *
+     * @remarks
+     * If there is no history to undo (e.g., at the beginning of the undo stack),
+     * this operation will have no effect. The notebook must be available and
+     * properly initialized for this operation to succeed.
+     */
+    undo(): void;
+    /**
+     * Redo the last undone change in the notebook.
+     *
+     * @remarks
+     * If there is no history to redo (e.g., no prior undo operations or at the
+     * end of the redo stack), this operation will have no effect. The notebook
+     * must be available and properly initialized for this operation to succeed.
+     */
+    redo(): void;
     /**
      * Dispose of the adapter.
      */
diff --git a/node_modules/@datalayer/jupyter-react/lib/components/notebook/Notebook2Adapter.js b/node_modules/@datalayer/jupyter-react/lib/components/notebook/Notebook2Adapter.js
index a6c29d2..53144a3 100644
--- a/node_modules/@datalayer/jupyter-react/lib/components/notebook/Notebook2Adapter.js
+++ b/node_modules/@datalayer/jupyter-react/lib/components/notebook/Notebook2Adapter.js
@@ -3,7 +3,7 @@
  *
  * MIT License
  */
-import { NotebookActions } from '@jupyterlab/notebook';
+import { NotebookActions, } from '@jupyterlab/notebook';
 export class Notebook2Adapter {
     _commands;
     _panel;
@@ -110,6 +110,28 @@ export class Notebook2Adapter {
     get model() {
         return this._context.model;
     }
+    /**
+     * Undo the last change in the notebook.
+     *
+     * @remarks
+     * If there is no history to undo (e.g., at the beginning of the undo stack),
+     * this operation will have no effect. The notebook must be available and
+     * properly initialized for this operation to succeed.
+     */
+    undo() {
+        NotebookActions.undo(this._notebook);
+    }
+    /**
+     * Redo the last undone change in the notebook.
+     *
+     * @remarks
+     * If there is no history to redo (e.g., no prior undo operations or at the
+     * end of the redo stack), this operation will have no effect. The notebook
+     * must be available and properly initialized for this operation to succeed.
+     */
+    redo() {
+        NotebookActions.redo(this._notebook);
+    }
     /**
      * Dispose of the adapter.
      */
diff --git a/node_modules/@datalayer/jupyter-react/lib/components/notebook/Notebook2State.d.ts b/node_modules/@datalayer/jupyter-react/lib/components/notebook/Notebook2State.d.ts
index 1ea7f63..c6f6cb7 100644
--- a/node_modules/@datalayer/jupyter-react/lib/components/notebook/Notebook2State.d.ts
+++ b/node_modules/@datalayer/jupyter-react/lib/components/notebook/Notebook2State.d.ts
@@ -22,6 +22,8 @@ export type Notebook2State = INotebooks2State & {
     insertBelow: (mutation: CellMutation) => void;
     delete: (id: string) => void;
     changeCellType: (mutation: CellMutation) => void;
+    undo: (id: string) => void;
+    redo: (id: string) => void;
     reset: () => void;
 };
 export declare const notebookStore2: import("zustand").StoreApi<Notebook2State>;
diff --git a/node_modules/@datalayer/jupyter-react/lib/components/notebook/Notebook2State.js b/node_modules/@datalayer/jupyter-react/lib/components/notebook/Notebook2State.js
index 33a060c..3a00b15 100644
--- a/node_modules/@datalayer/jupyter-react/lib/components/notebook/Notebook2State.js
+++ b/node_modules/@datalayer/jupyter-react/lib/components/notebook/Notebook2State.js
@@ -54,6 +54,34 @@ export const notebookStore2 = createStore((set, get) => ({
             .notebooks.get(mutation.id)
             ?.adapter?.changeCellType(mutation.cellType);
     },
+    undo: (id) => {
+        // Directly call adapter's undo method which uses NotebookActions
+        // This works for both local notebooks and collaborative notebooks
+        const notebook = get().notebooks.get(id);
+        if (!notebook) {
+            console.warn(`[Notebook2State] Cannot undo: notebook with id "${id}" not found`);
+            return;
+        }
+        if (!notebook.adapter) {
+            console.warn(`[Notebook2State] Cannot undo: adapter not available for notebook "${id}"`);
+            return;
+        }
+        notebook.adapter.undo();
+    },
+    redo: (id) => {
+        // Directly call adapter's redo method which uses NotebookActions
+        // This works for both local notebooks and collaborative notebooks
+        const notebook = get().notebooks.get(id);
+        if (!notebook) {
+            console.warn(`[Notebook2State] Cannot redo: notebook with id "${id}" not found`);
+            return;
+        }
+        if (!notebook.adapter) {
+            console.warn(`[Notebook2State] Cannot redo: adapter not available for notebook "${id}"`);
+            return;
+        }
+        notebook.adapter.redo();
+    },
     reset: () => set((state) => ({
         notebooks: new Map(),
     })),
diff --git a/node_modules/@datalayer/jupyter-react/lib/jupyter/JupyterConfig.d.ts b/node_modules/@datalayer/jupyter-react/lib/jupyter/JupyterConfig.d.ts
index 2e6c71b..a1551d1 100644
--- a/node_modules/@datalayer/jupyter-react/lib/jupyter/JupyterConfig.d.ts
+++ b/node_modules/@datalayer/jupyter-react/lib/jupyter/JupyterConfig.d.ts
@@ -24,6 +24,12 @@ export declare const setJupyterServerToken: (jupyterServerToken: string) => void
  * Getter for jupyterServerToken.
  */
 export declare const getJupyterServerToken: () => string;
+/**
+ * Reset the Jupyter configuration.
+ * This is useful when reusing webviews or remounting the application
+ * to ensure stale configuration doesn't persist.
+ */
+export declare const resetJupyterConfig: () => void;
 /**
  * Method to load the Jupyter configuration from the host HTML page.
  */
diff --git a/node_modules/@datalayer/jupyter-react/lib/jupyter/JupyterConfig.js b/node_modules/@datalayer/jupyter-react/lib/jupyter/JupyterConfig.js
index c6ea148..c5cbbe3 100644
--- a/node_modules/@datalayer/jupyter-react/lib/jupyter/JupyterConfig.js
+++ b/node_modules/@datalayer/jupyter-react/lib/jupyter/JupyterConfig.js
@@ -48,6 +48,14 @@ export const getJupyterServerToken = () => {
     }
     return config.jupyterServerToken;
 };
+/**
+ * Reset the Jupyter configuration.
+ * This is useful when reusing webviews or remounting the application
+ * to ensure stale configuration doesn't persist.
+ */
+export const resetJupyterConfig = () => {
+    config = undefined;
+};
 /**
  * Method to load the Jupyter configuration from the host HTML page.
  */
